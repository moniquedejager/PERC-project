getwd()
RoyleNicholsStats = function(simNr) {
library(unmarked)
x          = vector(length=0)
DATA       = data.frame(dens1 = x, dens2 = x, dT = x, StudyDuration = x, nCams = x, z = x, P = x, Ppresence = x)
outputfile = paste('./data/processed/PresenceAbsence/RoyleNicholsStats', simNr, '.txt')
if (!file.exists(outputfile)) { write.table(DATA, outputfile, col.names = T, row.names = F)}
for (i1 in 1:18)
{
for (i2 in (i1+1):19)
{
studyDuration = 365
nCams         = 25
print(paste(i1, i2))
df1   = as.matrix(read.table(paste('./data/processed/PresenceAbsence/PresAbs', i1, simNr, '.txt')))
dens1 = df1[1,1]
df1   = df1[,2:366]
df2   = as.matrix(read.table(paste('./data/processed/PresenceAbsence/PresAbs', i2, simNr, '.txt')))
dens2 = df2[1,1]
df2   = df2[,2:366]
cov  = data.frame(location=factor(c(rep('A', 25), rep('B', 25))),
density=c(rep(dens1, 25), rep(dens2, 25)))
Dets = rbind(df1, df2)
for (nCams in 5) #25:5)
{
for (studyDuration in 50) #round(exp(log(365)*(10:30/30))))
{
for (dT in 1) #unique(round(1.1^(4:54))))
{
if (dT <= studyDuration/2){
SD = studyDuration
nT = floor(SD/dT)
SD = nT*dT
Dets2 = Dets[,1:SD]
Dets3 = matrix(0, 50, nT)
# voor iedere rij in Dets2, presence/absence samenvoegen per tijdsinterval...
x = sort(rep(1:nT, dT))
for (i3 in 1:(nCams*2)) {
Dets3[i3,] = tapply(Dets2[i3,], x, max)
}
# randomly select cameras to use...
camsUsed = sort(rank(runif(25))[1:nCams]) # using nCams random camera traps.
Dets3 = Dets3[c(camsUsed, camsUsed+25),]
cov2  = cov[c(camsUsed, camsUsed+25),]
Ppresence = mean(rowSums(Dets3) > 0)
umf = unmarkedFrameOccu(y=Dets3, siteCovs=cov2)
m1  = occuRN(~1 ~location, umf)
s1  = summary(m1)
DATA = data.frame(dens1 = dens1, dens2 = dens2, dT = 1, StudyDuration = SD, nCams = nCams, z = s1$state$z[2], P = s1$state$`P(>|z|)`[2], Ppresence=Ppresence)
write.table(DATA, outputfile, append=T, col.names = F, row.names = F)
}
}
}
}
}
}
}
# library needed for parallel runs:
library(parallel)
# create the local cluster:
cl   = makeCluster(10)
# run the simulations:
results = parSapply(cl, 1:10, RoyleNicholsStats)
# stop the cluster:
stopCluster(cl)
simNr = 1
outputfile = paste('./data/processed/PresenceAbsence/RoyleNicholsStats', simNr, '.txt')
df = read.table(outputfile, header=T)
df$effect = (0 - 1*(df$z < -1.959964) + 1*(df$z > 1.959964))
df$effect[df$effect == 0] = 'No effect'
df$effect[df$effect == -1] = 'Incorrect relation'
df$effect[df$effect == 1] = 'Correct relation'
df$effect = factor(df$effect, levels=c('No effect', 'Incorrect relation', 'Correct relation'))
ggplot(df, aes(x=dens1, y=dens2, color=effect)) + geom_point() +
scale_x_continuous(trans='log10') +
scale_y_continuous(trans='log10')
library(ggplot2)
ggplot(df, aes(x=dens1, y=dens2, color=effect)) + geom_point() +
scale_x_continuous(trans='log10') +
scale_y_continuous(trans='log10')
ggplot(df, aes(x=dens1, y=dens2, fill=effect)) + geom_raster() +
scale_x_continuous(trans='log10') +
scale_y_continuous(trans='log10')
simNr = 2
outputfile = paste('./data/processed/PresenceAbsence/RoyleNicholsStats', simNr, '.txt')
df = read.table(outputfile, header=T)
df$effect = (0 - 1*(df$z < -1.959964) + 1*(df$z > 1.959964))
df$effect[df$effect == 0] = 'No effect'
df$effect[df$effect == -1] = 'Incorrect relation'
df$effect[df$effect == 1] = 'Correct relation'
df$effect = factor(df$effect, levels=c('No effect', 'Incorrect relation', 'Correct relation'))
library(ggplot2)
ggplot(df, aes(x=dens1, y=dens2, fill=effect)) + geom_raster() +
scale_x_continuous(trans='log10') +
scale_y_continuous(trans='log10')
simNr = 3
outputfile = paste('./data/processed/PresenceAbsence/RoyleNicholsStats', simNr, '.txt')
df = read.table(outputfile, header=T)
df$effect = (0 - 1*(df$z < -1.959964) + 1*(df$z > 1.959964))
df$effect[df$effect == 0] = 'No effect'
df$effect[df$effect == -1] = 'Incorrect relation'
df$effect[df$effect == 1] = 'Correct relation'
df$effect = factor(df$effect, levels=c('No effect', 'Incorrect relation', 'Correct relation'))
library(ggplot2)
ggplot(df, aes(x=dens1, y=dens2, fill=effect)) + geom_raster() +
scale_x_continuous(trans='log10') +
scale_y_continuous(trans='log10')
RoyleNicholsStats = function(simNr) {
library(unmarked)
x          = vector(length=0)
DATA       = data.frame(dens1 = x, dens2 = x, dT = x, StudyDuration = x, nCams = x, z = x, P = x, Ppresence = x)
outputfile = paste('./data/processed/PresenceAbsence/RoyleNicholsStats', simNr, '.txt')
if (!file.exists(outputfile)) { write.table(DATA, outputfile, col.names = T, row.names = F)}
for (i1 in 1:18)
{
for (i2 in (i1+1):19)
{
studyDuration = 365
nCams         = 25
print(paste(i1, i2))
df1   = as.matrix(read.table(paste('./data/processed/PresenceAbsence/PresAbs', i1, simNr, '.txt')))
dens1 = df1[1,1]
df1   = df1[,2:366]
df2   = as.matrix(read.table(paste('./data/processed/PresenceAbsence/PresAbs', i2, simNr, '.txt')))
dens2 = df2[1,1]
df2   = df2[,2:366]
cov  = data.frame(location=factor(c(rep('A', 25), rep('B', 25))),
density=c(rep(dens1, 25), rep(dens2, 25)))
Dets = rbind(df1, df2)
for (nCams in 25) #25:5)
{
for (studyDuration in 50) #round(exp(log(365)*(10:30/30))))
{
for (dT in 1) #unique(round(1.1^(4:54))))
{
if (dT <= studyDuration/2){
SD = studyDuration
nT = floor(SD/dT)
SD = nT*dT
Dets2 = Dets[,1:SD]
Dets3 = matrix(0, 50, nT)
# voor iedere rij in Dets2, presence/absence samenvoegen per tijdsinterval...
x = sort(rep(1:nT, dT))
for (i3 in 1:(nCams*2)) {
Dets3[i3,] = tapply(Dets2[i3,], x, max)
}
# randomly select cameras to use...
camsUsed = sort(rank(runif(25))[1:nCams]) # using nCams random camera traps.
Dets3 = Dets3[c(camsUsed, camsUsed+25),]
cov2  = cov[c(camsUsed, camsUsed+25),]
Ppresence = mean(rowSums(Dets3) > 0)
umf = unmarkedFrameOccu(y=Dets3, siteCovs=cov2)
m1  = occuRN(~1 ~location, umf)
s1  = summary(m1)
DATA = data.frame(dens1 = dens1, dens2 = dens2, dT = 1, StudyDuration = SD, nCams = nCams, z = s1$state$z[2], P = s1$state$`P(>|z|)`[2], Ppresence=Ppresence)
write.table(DATA, outputfile, append=T, col.names = F, row.names = F)
}
}
}
}
}
}
}
# library needed for parallel runs:
library(parallel)
# create the local cluster:
cl   = makeCluster(10)
# run the simulations:
results = parSapply(cl, 1:10, RoyleNicholsStats)
# stop the cluster:
stopCluster(cl)
simNr = 3
outputfile = paste('./data/processed/PresenceAbsence/RoyleNicholsStats', simNr, '.txt')
df = read.table(outputfile, header=T)
df = df[df$nCams == 25,]
df$effect = (0 - 1*(df$z < -1.959964) + 1*(df$z > 1.959964))
df$effect[df$effect == 0] = 'No effect'
df$effect[df$effect == -1] = 'Incorrect relation'
df$effect[df$effect == 1] = 'Correct relation'
df$effect = factor(df$effect, levels=c('No effect', 'Incorrect relation', 'Correct relation'))
library(ggplot2)
ggplot(df, aes(x=dens1, y=dens2, fill=effect)) + geom_raster() +
scale_x_continuous(trans='log10') +
scale_y_continuous(trans='log10')
simNr = 1
outputfile = paste('./data/processed/PresenceAbsence/RoyleNicholsStats', simNr, '.txt')
df = read.table(outputfile, header=T)
df = df[df$nCams == 25,]
df$effect = (0 - 1*(df$z < -1.959964) + 1*(df$z > 1.959964))
df$effect[df$effect == 0] = 'No effect'
df$effect[df$effect == -1] = 'Incorrect relation'
df$effect[df$effect == 1] = 'Correct relation'
df$effect = factor(df$effect, levels=c('No effect', 'Incorrect relation', 'Correct relation'))
library(ggplot2)
ggplot(df, aes(x=dens1, y=dens2, fill=effect)) + geom_raster() +
scale_x_continuous(trans='log10') +
scale_y_continuous(trans='log10')
install.packages("lintr")
lintr::use_lintr(type = "tidyverse")
# blabla
library(lintr)
lintr::use_lintr(type = "tidyverse")
lint("20230222RoyleNicholsStats.R")
lint("./src/20230222RoyleNicholsStats.R")
install.packages("styler")
library(styler)
style_file("./src/20230222RoyleNicholsStats.R")
style_file("./src/20230222RoyleNicholsStats.R")
lint("./src/20230222RoyleNicholsStats.R")
lint("./src/20230222RoyleNicholsStats.R")
lint("./src/20230222RoyleNicholsStats.R")
lint("./src/20230222RoyleNicholsStats.R")
lint("./src/20230222RoyleNicholsStats.R")
lint("./src/20230222RoyleNicholsStats.R")
lint("./src/20230222RoyleNicholsStats.R")
lint("./src/20230222RoyleNicholsStats.R")
lint("./src/20230222RoyleNicholsStats.R")
lint("./src/20230222RoyleNicholsStats.R")
?expand.grid
# 1. Create a file that contains all the parameter combinations:
i1 <- 1:19
i2 <- 1:19
time_interval <- unique(round(1.1^(4:54)))
study_duration <- round(exp(log(365)*(10:30/30)))
n_cams <- 25:5
df <- expand.grid(i1, i2, time_interval, study_duration, n_cams)
df <- expand.grid(i1 = i1, i2 = i2, time_interval = time_interval, study_duration = study_duration, n_cams = n_cams)
# exclude all occurrences where i1 >= i2:
df <- df[df$i1 >= df$i2]
# exclude all occurrences where i1 >= i2:
df <- df[df$i1 >= df$i2,]
# exclude all occurrences where time_interval > study_duration / 2
df <- df[df$time_interval > (df$study_duration / 2)]
# exclude all occurrences where time_interval > study_duration / 2
df <- df[df$time_interval > (df$study_duration / 2),]
# write the parameter combinations to a file:
write.table(df, './data/temp/parameter_combinations_royle_nichols_stats.txt', header=TRUE, row.names = FALSE, col.names = TRUE)
# write the parameter combinations to a file:
write.table(df, './data/temp/parameter_combinations_royle_nichols_stats.txt', append = FALSE, row.names = FALSE, col.names = TRUE)
# 1. Create a file that contains all the parameter combinations:
i1 <- 1:19
i2 <- 1:19
time_interval <- 1 #unique(round(1.1^(4:54)))
study_duration <- 365 #round(exp(log(365)*(10:30/30)))
n_cams <- 20 #25:5
source('./src/functions/create_table.R')
df <- expand.grid(i1 = i1, i2 = i2, time_interval = time_interval, study_duration = study_duration, n_cams = n_cams)
# exclude all occurrences where i1 >= i2:
df <- df[df$i1 >= df$i2,]
# exclude all occurrences where time_interval > study_duration / 2
df <- df[df$time_interval > (df$study_duration / 2),]
df <- expand.grid(i1 = i1, i2 = i2, time_interval = time_interval, study_duration = study_duration, n_cams = n_cams)
# exclude all occurrences where i1 >= i2:
df <- df[df$i1 >= df$i2,]
# exclude all occurrences where time_interval > study_duration / 2
df <- df[df$time_interval < (df$study_duration / 2),]
# 1. Create a file that contains all the parameter combinations:
i1 <- 1:19
i2 <- 1:19
time_interval <- 1 #unique(round(1.1^(4:54)))
study_duration <- 365 #round(exp(log(365)*(10:30/30)))
n_cams <- 20 #25:5
source('./src/functions/create_table.R')
# 1. Create a file that contains all the parameter combinations:
sim_nr <- 1:10
i1 <- 1:19
i2 <- 1:19
time_interval <- 1 #unique(round(1.1^(4:54)))
study_duration <- 365 #round(exp(log(365)*(10:30/30)))
n_cams <- 20 #25:5
source('./src/functions/create_table.R')
# get the parameter values from the table:
values <- read.table('./data/temp/parameter_combinations_royle_nichols_stats.txt', header=TRUE)
i = 15
values <- values[i,]
n_cams <- values$n_cams
sim_nr <- values$sim_nr
df1 <- as.matrix(
read.table(paste("./data/processed/PresenceAbsence/PresAbs",
i1, sim_nr, ".txt")))
paste("./data/processed/PresenceAbsence/PresAbs",
i1, sim_nr, ".txt"))
i1 <- values$i1
i2 <- values$i2
# get the parameter values from the table:
values <- read.table('./data/temp/parameter_combinations_royle_nichols_stats.txt', header=TRUE)
values <- values[i,]
attach(values)
i = 100
# get the parameter values from the table:
values <- read.table('./data/temp/parameter_combinations_royle_nichols_stats.txt', header=TRUE)
values <- values[i,]
attach(values)
?attach
study_duration <- values$study_duration
time_interval <- values$time_interval
n_cams <- values$n_cams
sim_nr <- values$sim_nr
i1 <- values$i1
i2 <- values$i2
df1 <- as.matrix(
read.table(paste("./data/processed/PresenceAbsence/PresAbs",
i1, sim_nr, ".txt")))
dens1 <- df1[1, 1]
df1 <- df1[, 2:366]
df2 <- as.matrix(
read.table(paste("./data/processed/PresenceAbsence/PresAbs",
i2, sim_nr, ".txt")))
dens2 <- df2[1, 1]
df2 <- df2[, 2:366]
cov <- data.frame(
location = factor(c(rep("A", 25), rep("B", 25))),
density = c(rep(dens1, 25), rep(dens2, 25))
)
dets <- rbind(df1, df2)
# find out how many simulations to run:
values <- read.table('./data/temp/parameter_combinations_royle_nichols_stats.txt', header=TRUE)
n <- length(values$sim_nr)
